version: "3.9"

services:
  
  api:
    build:
      context: .
      dockerfile: ml_service/Dockerfile
    container_name: ml_service_api
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started  
    env_file:
      - .env
    volumes:
      - .:/app
    working_dir: /app/ml_service
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8000/"]
      interval: 5s
      timeout: 3s
      retries: 5
  

  ml_inference_worker:
    build: 
      context: .
      dockerfile: ml_inference/Dockerfile
    container_name: ml_inference_worker
    depends_on:
    - redis
    env_file:
    - .env
    environment:
    - PYTHONPATH=/app
    
    working_dir: /app
    volumes:
    - .:/app
   
    networks:
      - monitoring    
    
  


  postgres:
    image: postgres
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: ml_service_db
      POSTGRES_USER: ml_user
      POSTGRES_PASSWORD: ml_pass
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "15432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ml_service_db -U ml_user -p 5432"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - monitoring  

  redis:
    image: redis:7
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    networks:
      - monitoring  
  ### üî• Prometheus —Å–µ—Ä–≤–∏—Å
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - api
    networks:
      - monitoring  

  ### üî• Grafana —Å–µ—Ä–≤–∏—Å
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring

  celery_exporter:
    image: ovalmoney/celery-exporter
    container_name: celery_exporter
    ports:
      - "9540:9540"
    environment:
      - CELERY_EXPORTER_BROKER_URL=redis://redis:6379/0
    networks:
      - monitoring

  streamlit_app:
    build:
      context: ./streamlit_front
      dockerfile: Dockerfile 
    ports:
      - "8501:8501"
    depends_on:
      api:
        condition: service_healthy
    environment:
      - API_URL=http://api:8000
    networks:
      - monitoring

    

          

volumes:
  pgdata:
  grafana_data:
networks:
  monitoring:


